"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const helpers_1 = require("../helpers");
const config_1 = require("../config");
const imports_1 = require("../imports");
const saveSourceFile_1 = tslib_1.__importDefault(require("../../utils/saveSourceFile"));
const helpers_2 = require("./helpers");
async function generateActionResolverClass(project, baseDirPath, model, operationKind, actionName, method, outputTypeName, argsTypeName, collectionName, modelNames, mapping, options) {
    const actionResolverName = `${helpers_1.pascalCase(method.name)}Resolver`;
    const resolverDirPath = path_1.default.resolve(baseDirPath, config_1.resolversFolderName, config_1.crudResolversFolderName, model.name);
    const filePath = path_1.default.resolve(resolverDirPath, `${actionResolverName}.ts`);
    const sourceFile = project.createSourceFile(filePath, undefined, {
        overwrite: true,
    });
    imports_1.generateTypeGraphQLImport(sourceFile);
    if (argsTypeName) {
        imports_1.generateArgsImports(sourceFile, [argsTypeName], 0);
    }
    imports_1.generateModelsImports(sourceFile, [model.name, outputTypeName].filter(name => modelNames.includes(name)), 3);
    imports_1.generateOutputsImports(sourceFile, [outputTypeName].filter(name => !modelNames.includes(name)), 2);
    sourceFile.addClass({
        name: actionResolverName,
        isExported: true,
        decorators: [
            {
                name: "TypeGraphQL.Resolver",
                arguments: [`_of => ${model.name}`],
            },
        ],
        methods: [
            helpers_2.generateCrudResolverClassMethodDeclaration(operationKind, actionName, method, argsTypeName, collectionName, modelNames, mapping, options),
        ],
    });
    await saveSourceFile_1.default(sourceFile);
    return actionResolverName;
}
exports.default = generateActionResolverClass;
//# sourceMappingURL=separate-action.js.map