import { Check } from '../check';
declare type Subset<_T extends U, U> = U;
declare type State = Subset<Check.State, {
    cache_file: string;
}>;
export default function configure(state: State): Promise<Config>;
export declare class Config {
    private readonly state;
    private readonly defaultSchema;
    static new(state: State, defaultSchema: Check.Schema): Promise<Config>;
    static sync(state: State, schema?: Check.Schema): Config;
    constructor(state: State, defaultSchema: Check.Schema);
    set(update: Partial<Check.Schema>): Promise<void>;
    all(): Promise<Check.Schema | undefined>;
    get<K extends keyof Check.Schema>(key: K): Promise<Check.Schema[K] | undefined>;
    reset(): Promise<void>;
    delete(): Promise<void>;
}
export {};
