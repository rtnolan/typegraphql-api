"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cross_spawn_1 = require("cross-spawn");
const byline_1 = __importDefault(require("./byline"));
const fs_1 = __importDefault(require("fs"));
const isbinaryfile_1 = require("isbinaryfile");
const chalk_1 = __importDefault(require("chalk"));
let globalMessageId = 1;
class GeneratorError extends Error {
    constructor(message, code, data) {
        super(message);
        this.code = code;
        this.data = data;
    }
}
exports.GeneratorError = GeneratorError;
class GeneratorProcess {
    constructor(executablePath) {
        this.executablePath = executablePath;
        this.listeners = {};
        this.exitCode = null;
        this.stderrLogs = '';
        this.initialized = false;
        // executablePath can be passed like this
        // "/Users/prisma/go/bin/photongo" as a path to the executable (no options)
        // "go run prisma/photongo/generator" as a command
        if (!executablePath.includes(' ') && !fs_1.default.existsSync(executablePath)) {
            throw new Error(`Error in generator: Can't find executable ${executablePath}`);
        }
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.initPromise) {
                this.initPromise = this.initSingleton();
            }
            return this.initPromise;
        });
    }
    initSingleton() {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            let isBinary = true;
            let command = this.executablePath;
            let args = [];
            if (this.executablePath.includes(' ')) {
                const arr = this.executablePath.split(' ');
                command = arr.shift();
                args = arr;
            }
            else {
                isBinary = yield isbinaryfile_1.isBinaryFile(this.executablePath);
            }
            this.child = cross_spawn_1.spawn(isBinary ? command : process.execPath, isBinary ? args : ['--max-old-space-size=8096', command], {
                stdio: ['pipe', 'inherit', 'pipe'],
            });
            this.child.on('exit', code => {
                this.exitCode = code;
            });
            this.child.on('error', err => {
                if (err.message.includes('EACCES')) {
                    reject(new Error(`The executable at ${this.executablePath} lacks the right chmod. Please use ${chalk_1.default.bold(`chmod +x ${this.executablePath}`)}`));
                }
            });
            byline_1.default(this.child.stderr).on('data', line => {
                const response = String(line);
                this.stderrLogs += response + '\n';
                let data;
                try {
                    data = JSON.parse(response);
                }
                catch (e) {
                    console.error(response);
                }
                if (data) {
                    this.handleResponse(data);
                }
            });
            // wait 200ms for the binary to fail
            setTimeout(() => {
                if (this.exitCode && this.exitCode > 0) {
                    reject(new Error(`Generator at ${this.executablePath} could not start:\n\n${this.stderrLogs}`));
                }
                else {
                    this.initialized = true;
                    resolve();
                }
            }, 200);
        }));
    }
    handleResponse(data) {
        if (data.jsonrpc && data.id) {
            if (typeof data.id !== 'number') {
                throw new Error(`message.id has to be a number. Found value ${data.id}`);
            }
            if (this.listeners[data.id]) {
                if (data.error) {
                    const error = new GeneratorError(data.error.message, data.error.code, data.error.data);
                    this.listeners[data.id](null, error);
                }
                else {
                    this.listeners[data.id](data.result);
                }
                delete this.listeners[data.id];
            }
        }
    }
    registerListener(messageId, cb) {
        this.listeners[messageId] = cb;
    }
    sendMessage(message) {
        this.child.stdin.write(JSON.stringify(message) + '\n');
    }
    getMessageId() {
        return globalMessageId++;
    }
    stop() {
        if (!this.child.killed) {
            this.child.kill();
        }
    }
    getManifest() {
        return new Promise((resolve, reject) => {
            const messageId = this.getMessageId();
            this.registerListener(messageId, (result, error) => {
                if (error) {
                    return reject(error);
                }
                if (result.manifest) {
                    resolve(result.manifest);
                }
                else {
                    resolve(null);
                }
            });
            this.sendMessage({
                jsonrpc: '2.0',
                method: 'getManifest',
                params: {},
                id: messageId,
            });
        });
    }
    generate(options) {
        return new Promise((resolve, reject) => {
            const messageId = this.getMessageId();
            this.registerListener(messageId, (result, error) => {
                if (error) {
                    return reject(error);
                }
                resolve(result);
            });
            this.sendMessage({
                jsonrpc: '2.0',
                method: 'generate',
                params: options,
                id: messageId,
            });
        });
    }
}
exports.GeneratorProcess = GeneratorProcess;
function hasChmodX(file) {
    const s = fs_1.default.statSync(file);
    // tslint:disable-next-line
    const newMode = s.mode | 64 | 8 | 1;
    return s.mode === newMode;
}
//# sourceMappingURL=GeneratorProcess.js.map