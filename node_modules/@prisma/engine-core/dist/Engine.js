"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const log_1 = require("./log");
const chalk_1 = __importDefault(require("chalk"));
class PrismaQueryEngineError extends Error {
    constructor(message, code) {
        super(message);
        this.code = code;
    }
}
exports.PrismaQueryEngineError = PrismaQueryEngineError;
function getMessage(log) {
    if (typeof log === 'string') {
        return log;
    }
    else if (log_1.isRustError(log)) {
        return log.message;
    }
    else if (log.fields && log.fields.message) {
        if (log.fields.reason) {
            return `${log.fields.message}: ${log.fields.reason}`;
        }
        return log.fields.message;
    }
    else {
        return JSON.stringify(log);
    }
}
exports.getMessage = getMessage;
class PrismaClientKnownRequestError extends Error {
    constructor(message, code, meta) {
        super(message);
        this.code = code;
        this.meta = meta;
    }
}
exports.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
class PrismaClientUnknownRequestError extends Error {
    constructor(message) {
        super(message);
    }
}
exports.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
class PrismaClientRustPanicError extends Error {
    constructor(message) {
        super(message);
    }
}
exports.PrismaClientRustPanicError = PrismaClientRustPanicError;
class PrismaClientInitializationError extends Error {
    constructor(message) {
        super(message);
    }
}
exports.PrismaClientInitializationError = PrismaClientInitializationError;
function mapKeys(obj, mapper) {
    return Object.entries(obj).reduce((acc, [key, value]) => {
        acc[mapper(key)] = value;
        return acc;
    }, {});
}
function serializeError(log) {
    let { target, level, ...rest } = log;
    const message = log.message || (log.fields && log.fields.message);
    if (target === 'datamodel') {
        return chalk_1.default.red.bold('Schema ') + message;
    }
    if (target === 'exit') {
        return chalk_1.default.red.bold('Engine exited ' + JSON.stringify(log));
    }
    return chalk_1.default.red(log.message + ' ' + serializeObject(rest));
}
function serializePanic(log) {
    const fields = log.fields;
    return `${chalk_1.default.red.bold('Reason: ')}${chalk_1.default.red(`${fields.reason} in ${chalk_1.default.underline(`${fields.file}:${fields.line}:${fields.column}`)}`)}

Please create an issue in the ${chalk_1.default.bold('prisma-client-js')} repo with
your \`schema.prisma\` and the Prisma Client method you tried to use 🙏:
${chalk_1.default.underline('https://github.com/prisma/prisma-client-js/issues/new')}\n`;
}
function serializeObject(obj) {
    return Object.entries(obj)
        .map(([key, value]) => `${key}=${JSON.stringify(value)}`)
        .join(' ');
}
//# sourceMappingURL=Engine.js.map