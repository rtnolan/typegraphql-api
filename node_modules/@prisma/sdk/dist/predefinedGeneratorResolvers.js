"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const resolve_pkg_1 = __importDefault(require("resolve-pkg"));
const chalk_1 = __importDefault(require("chalk"));
const has_yarn_1 = __importDefault(require("has-yarn"));
const execa_1 = __importDefault(require("execa"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const debug_1 = __importDefault(require("debug"));
const debugEnabled = debug_1.default.enabled('generator');
exports.predefinedGeneratorResolvers = {
    photonjs: () => {
        throw new Error(`Oops! Photon has been renamed to Prisma Client. Please make the following adjustments:
  1. Rename ${chalk_1.default.red('provider = "photonjs"')} to ${chalk_1.default.green('provider = "prisma-client-js"')} in your ${chalk_1.default.bold('schema.prisma')} file.
  2. Replace your ${chalk_1.default.bold('package.json')}'s ${chalk_1.default.red('@prisma/photon')} dependency to ${chalk_1.default.green('@prisma/client')}
  3. Replace ${chalk_1.default.red("import { Photon } from '@prisma/photon'")} with ${chalk_1.default.green("import { PrismaClient } from '@prisma/client'")} in your code.
  4. Run ${chalk_1.default.green('prisma generate')} again.
      `);
    },
    'prisma-client-js': (baseDir, version) => __awaiter(void 0, void 0, void 0, function* () {
        let prismaClientDir = resolve_pkg_1.default('@prisma/client', { cwd: baseDir });
        if (debugEnabled) {
            console.log({ prismaClientDir });
        }
        if (!prismaClientDir && !process.env.PRISMA_GENERATE_SKIP_AUTOINSTALL) {
            if (!fs_1.default.existsSync(path_1.default.join(process.cwd(), 'package.json')) &&
                !fs_1.default.existsSync(path_1.default.join(process.cwd(), '../package.json'))) {
                // Create default package.json
                const defaultPackageJson = `{
  "name": "my-prisma-project",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \\"Error: no test specified\\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}
        `;
                fs_1.default.writeFileSync(path_1.default.join(process.cwd(), 'package.json'), defaultPackageJson);
                console.info(`‚úî Created ${chalk_1.default.bold.green('./package.json')}`);
            }
            yield installPackage(baseDir, `-D @prisma/cli@${version !== null && version !== void 0 ? version : 'latest'}`);
            yield installPackage(baseDir, `@prisma/client@${version !== null && version !== void 0 ? version : 'latest'}`);
            prismaClientDir = resolve_pkg_1.default('@prisma/client', { cwd: baseDir });
            if (!prismaClientDir) {
                throw new Error(`Could not resolve @prisma/client despite the installation that we just tried.
Please try to install it by hand with ${chalk_1.default.bold.greenBright('npm install @prisma/client')} and rerun ${chalk_1.default.bold('prisma generate')} üôè.`);
            }
            console.info(`\n‚úî Installed the ${chalk_1.default.bold.green('@prisma/client')} and ${chalk_1.default.bold.green('prisma')} packages in your project`);
        }
        if (!prismaClientDir) {
            throw new Error(`Could not resolve @prisma/client. 
Please try to install it with ${chalk_1.default.bold.greenBright('npm install @prisma/client')} and rerun ${chalk_1.default.bold('prisma generate')} üôè.`);
        }
        return {
            outputPath: prismaClientDir,
            generatorPath: path_1.default.resolve(prismaClientDir, 'generator-build/index.js'),
        };
    }),
};
function installPackage(baseDir, pkg) {
    return __awaiter(this, void 0, void 0, function* () {
        const yarnUsed = has_yarn_1.default(baseDir);
        const cmdName = yarnUsed ? 'yarn add' : 'npm install';
        yield execa_1.default.command(`${cmdName} ${pkg}`, {
            cwd: baseDir,
            stdio: 'inherit',
            env: Object.assign(Object.assign({}, process.env), { SKIP_GENERATE: 'true' }),
        });
    });
}
//# sourceMappingURL=predefinedGeneratorResolvers.js.map