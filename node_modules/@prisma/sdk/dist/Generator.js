"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const generator_helper_1 = require("@prisma/generator-helper");
const debug_1 = __importDefault(require("debug"));
class Generator {
    constructor(executablePath) {
        this.executablePath = executablePath;
        this.manifest = null;
        this.generatorProcess = new generator_helper_1.GeneratorProcess(this.executablePath);
        this.debug = debug_1.default(`Generator:${executablePath}`);
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.generatorProcess.init();
            this.debug(`Sending "getManifest" rpc to generator`);
            this.manifest = yield this.generatorProcess.getManifest();
        });
    }
    stop() {
        this.generatorProcess.stop();
    }
    generate() {
        if (!this.options) {
            throw new Error(`Please first run .setOptions() on the Generator to initialize the options`);
        }
        this.debug(`Sending "generate" rpc to generator`);
        return this.generatorProcess.generate(this.options);
    }
    setOptions(options) {
        this.options = options;
    }
    setBinaryPaths(binaryPaths) {
        if (!this.options) {
            throw new Error(`Please first run .setOptions() on the Generator to initialize the options`);
        }
        this.options.binaryPaths = binaryPaths;
    }
}
exports.Generator = Generator;
//# sourceMappingURL=Generator.js.map